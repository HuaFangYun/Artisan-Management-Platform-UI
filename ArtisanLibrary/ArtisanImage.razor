@page "/artisan/image"
@using System.Net.Http.Headers
@inject AuthService AuthStateService
@inject ImageService ImageService
@inject NotificationService ToastService
@layout ArtisanProfileLayout

<div class="card mb-5 mb-xl-10">
<!--begin::Card header-->
<div class="card-header border-0 cursor-pointer" role="button" data-bs-toggle="collapse" data-bs-target="#kt_account_profile_details" aria-expanded="true" aria-controls="kt_account_profile_details">
    <!--begin::Card title-->
    <div class="card-title m-0">
        <h3 class="fw-bolder m-0">Profile Details</h3>
    </div>
    <!--end::Card title-->
</div>
<!--begin::Card header-->
<!--begin::Content-->
<div id="kt_account_profile_details" class="collapse show">
        <!--begin::Card body-->
        <div class="card-body border-top p-9">
            <!--begin::Input group-->
            <div class="row mb-6">
                <!--begin::Label-->
                <label class="col-lg-4 col-form-label fw-bold fs-6">Avatar</label>
                <!--end::Label-->
                <!--begin::Col-->
                <div class="col-lg-8">
                    <!--begin::Image input-->
                    <div class="image-input image-input-outline" data-kt-image-input="true" style="background-image: url(@ImageUrl)">
                        <!--begin::Preview existing avatar-->
                        <div class="image-input-wrapper w-125px h-125px" style="background-image: url(@ImageUrl)"></div>
                        <!--end::Preview existing avatar-->
                        <!--begin::Label-->
                        <label class="btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow" data-kt-image-input-action="change" data-bs-toggle="tooltip" title="Change avatar">
                            <i class="bi bi-pencil-fill fs-7"></i>
                            <!--begin::Inputs-->
                            <InputFile OnChange="@OnInputFileChange" multiple type="file" name="avatar" accept=".png, .jpg, .jpeg"/>
                            <input type="hidden" name="avatar_remove"/>
                            <!--end::Inputs-->
                        </label>
                        <!--end::Label-->
                        <!--begin::Cancel-->
                        <span class="btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow" data-kt-image-input-action="cancel" data-bs-toggle="tooltip" title="Cancel avatar">
                            <i class="bi bi-x fs-2"></i>
                        </span>
                        <!--end::Cancel-->
                        <!--begin::Remove-->
                        <span class="btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow" data-kt-image-input-action="remove" data-bs-toggle="tooltip" title="Remove avatar">
                            <i class="bi bi-x fs-2"></i>
                        </span>
                        <!--end::Remove-->
                    </div>
                    <!--end::Image input-->
                    <!--begin::Hint-->
                    <div class="form-text">Allowed file types: png, jpg, jpeg.</div>
                    <!--end::Hint-->
                    

                    <!--begin::Hint-->
                    <div class="form-text">Selected File: @fileName</div>
                    <!--end::Hint-->
                </div>
                <!--end::Col-->
            </div>
            <!--end::Input group-->
        </div>
        
        <!--begin::Actions-->
        <div class="card-footer d-flex justify-content-end py-6 px-9">
            <button type="reset" class="btn btn-light btn-active-light-primary me-2">Discard</button>
            <button type="submit" class="btn btn-primary" id="kt_account_profile_details_submit"
                    disabled="@IsLoading">Save Changes</button>
        </div>
        <!--end::Actions-->
</div>
</div>
@code {
    string ImageUrl { get; set; }
    bool IsLoading { get; set; }
    ImageCommand Image { get; set; } = new ImageCommand();
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();

    protected override async Task OnInitializedAsync()
    {
		var isLoggedIn = await AuthStateService.CheckAuthStatus();
		if (!isLoggedIn) return;
        ImageUrl = Image.ImageUrl ?? "";
    }

    private bool shouldRender;
    private string fileName;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 10000000;
        var upload = false;

        using var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");

        foreach (var file in e.GetMultipleFiles(3))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = 
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = 
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "file",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    //Logger.LogInformation(
                    //    "{FileName} not uploaded (Err: 6): {Message}", 
                    //    file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name, 
                            ErrorCode = 6, 
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            DisableButtons(true);
            var response = await ImageService.Upload(content);
            if (response.IsComplete)
            {
                ToastService.SaveSuccess();
                DisableButtons(false);
                return;
            }

            ToastService.SaveFailure();
            DisableButtons(false);
        }

        shouldRender = true;
    }

    void DisableButtons(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }

    public class UploadResult
    {
        public bool Uploaded { get; set; }
        public string? FileName { get; set; }
        public string? StoredFileName { get; set; }
        public int ErrorCode { get; set; }
    }

    private class File
    {
        public string? Name { get; set; }
    }
}
