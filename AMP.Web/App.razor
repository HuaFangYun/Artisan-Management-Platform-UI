@using System.Reflection
@inject LazyAssemblyLoader AssemblyLoader

<Router AppAssembly="@typeof(App).Assembly"
        AdditionalAssemblies="@(new [] {typeof(ArtisanProfileLayout).Assembly, 
                                  typeof(CustomerProfileLayout).Assembly})">
@*    <Navigating>
        <div style="padding:20px;background-color:blue;color:white">
            <p>Loading the requested page...</p>
        </div>
    </Navigating>*@
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@*<ItemGroup>
    <BlazorWebAssemblyLazyLoad Include="ArtisanLibrary.dll" />
    <BlazorWebAssemblyLazyLoad Include="CustomerLibrary.dll" />
</ItemGroup>*@

@*@code {
    private readonly List<Assembly> _lazyLoadedAssemblies = new();
    
    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            IEnumerable<Assembly> assemblies;
            
            if (args.Path.Contains("artisan") && !args.Path.Contains("users"))
            {
                assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { $"{typeof(ArtisanProfileLayout).Assembly}"});
                _lazyLoadedAssemblies.AddRange(assemblies);
            }
            if (args.Path.Contains("customer"))
            {
                assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { $"{typeof(CustomerProfileLayout).Assembly}"});
                _lazyLoadedAssemblies.AddRange(assemblies);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}*@