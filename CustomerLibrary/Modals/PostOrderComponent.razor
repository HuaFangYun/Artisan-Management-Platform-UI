@using AMP.Web.Models.ViewModels
@inject OrderService OrderService
@inject NotificationService ToastService
@inject NavigationService Navigator
@inject AuthService AuthStateService
@implements IDisposable
@inject IActionDispatcher ActionDispatcher
@inject OrderStore OrderStore

<h3>Continue post?</h3>

<div class="card-footer">
	<!--begin::Action-->
	<a class="btn btn-success align-self-center float-end" @onclick="PostOrder">Yes</a>
	<!--end::Action-->
</div>

@code {

	[Parameter]
	public OrderCommand Order { get; set; } = new();
	[Parameter]
	public List<Lookup> Services { get; set; } = new();

	bool IsLoading { get; set; }


	async Task PostOrder()
	{
		Navigator.NavigateToAddOrder();
		Order.UserId = await AuthStateService.GetClaim("nameid");
		if (Order.UserId == default 
		    || Order.ServiceId == default 
		    || string.IsNullOrEmpty(Order.WorkAddress.StreetAddress)
		    || string.IsNullOrEmpty(Order.WorkAddress.Town)) return;
		DisableButtons(true);
		var response = await OrderService.Insert(Order);
		if (response.OrderId != default)
		{
			OrderStore.AddStateChangeListener(UpdateView);
			await ResetOrders();
			ToastService.SaveSuccess();
			Navigator.NavigateToAssignOrderToArtisan(response.OrderId, response.Service);
			return;
		}
		ToastService.SaveFailure();
		DisableButtons(false);
	}

	private async Task ResetOrders()
	{
		await ActionDispatcher.Dispatch(new ResetOrderPageAction());
	}

	private void UpdateView()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		OrderStore.RemoveStateChangeListener(UpdateView);
	}

	void DisableButtons(bool isLoading)
	{
		IsLoading = isLoading;
		StateHasChanged();
	}
}
